
Experiment-3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  00000afa  00000b6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000afa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bf8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000187e  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e53  00000000  00000000  00002566  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008f3  00000000  00000000  000033b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f4  00000000  00000000  00003cac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000723  00000000  00000000  00003ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ce5  00000000  00000000  000045c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000052a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ef       	ldi	r30, 0xFA	; 250
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 32       	cpi	r26, 0x2E	; 46
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae e2       	ldi	r26, 0x2E	; 46
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 32       	cpi	r26, 0x2E	; 46
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	08 d1       	rcall	.+528    	; 0x330 <main>
 120:	ea c4       	rjmp	.+2516   	; 0xaf6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_print_wireframe>:
*/

//<< NOTE >>: You should not change this function in order to get the required output
void lcd_print_wireframe(void)
{	
	lcd_string(1,1,"H:   D:    O:   ");
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	52 e0       	ldi	r21, 0x02	; 2
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	ee d1       	rcall	.+988    	; 0x50a <lcd_string>
	lcd_string(2,1,"Binary: ");
 12e:	41 e1       	ldi	r20, 0x11	; 17
 130:	52 e0       	ldi	r21, 0x02	; 2
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	e9 c1       	rjmp	.+978    	; 0x50a <lcd_string>
 138:	08 95       	ret

0000013a <lcd_print_binary>:
 * @param[in]  row_num  The row number of the LCD
 * @param[in]  col_num  The col number of the LCD
 * @param[in]  num      The number to be printed
 */
void lcd_print_binary(unsigned char row_num, unsigned char col_num, unsigned char num)
{
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	a8 97       	sbiw	r28, 0x28	; 40
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
 156:	18 2f       	mov	r17, r24
 158:	06 2f       	mov	r16, r22
char bin_buff[40];
int bin=0 , j=1;
for(int i=num;i>0;i=i/2)
 15a:	24 2f       	mov	r18, r20
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	12 16       	cp	r1, r18
 160:	13 06       	cpc	r1, r19
 162:	44 f5       	brge	.+80     	; 0x1b4 <lcd_print_binary+0x7a>
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	a0 e0       	ldi	r26, 0x00	; 0
 16a:	b0 e0       	ldi	r27, 0x00	; 0
{
	bin=bin + ((num%2) * j);
 16c:	e4 2f       	mov	r30, r20
 16e:	e1 70       	andi	r30, 0x01	; 1
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e8 9f       	mul	r30, r24
 174:	b0 01       	movw	r22, r0
 176:	e9 9f       	mul	r30, r25
 178:	70 0d       	add	r23, r0
 17a:	f8 9f       	mul	r31, r24
 17c:	70 0d       	add	r23, r0
 17e:	11 24       	eor	r1, r1
 180:	a6 0f       	add	r26, r22
 182:	b7 1f       	adc	r27, r23
	j=j*10;
 184:	bc 01       	movw	r22, r24
 186:	66 0f       	add	r22, r22
 188:	77 1f       	adc	r23, r23
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	86 0f       	add	r24, r22
 198:	97 1f       	adc	r25, r23
	num=num/2;
 19a:	46 95       	lsr	r20
 */
void lcd_print_binary(unsigned char row_num, unsigned char col_num, unsigned char num)
{
char bin_buff[40];
int bin=0 , j=1;
for(int i=num;i>0;i=i/2)
 19c:	b9 01       	movw	r22, r18
 19e:	33 23       	and	r19, r19
 1a0:	14 f4       	brge	.+4      	; 0x1a6 <lcd_print_binary+0x6c>
 1a2:	6f 5f       	subi	r22, 0xFF	; 255
 1a4:	7f 4f       	sbci	r23, 0xFF	; 255
 1a6:	9b 01       	movw	r18, r22
 1a8:	35 95       	asr	r19
 1aa:	27 95       	ror	r18
 1ac:	12 16       	cp	r1, r18
 1ae:	13 06       	cpc	r1, r19
 1b0:	ec f2       	brlt	.-70     	; 0x16c <lcd_print_binary+0x32>
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <lcd_print_binary+0x7e>
 * @param[in]  num      The number to be printed
 */
void lcd_print_binary(unsigned char row_num, unsigned char col_num, unsigned char num)
{
char bin_buff[40];
int bin=0 , j=1;
 1b4:	a0 e0       	ldi	r26, 0x00	; 0
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
{
	bin=bin + ((num%2) * j);
	j=j*10;
	num=num/2;
}
sprintf(bin_buff,"%08d",bin);
 1b8:	bf 93       	push	r27
 1ba:	af 93       	push	r26
 1bc:	8a e1       	ldi	r24, 0x1A	; 26
 1be:	92 e0       	ldi	r25, 0x02	; 2
 1c0:	9f 93       	push	r25
 1c2:	8f 93       	push	r24
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	7c 01       	movw	r14, r24
 1ca:	9f 93       	push	r25
 1cc:	8f 93       	push	r24
 1ce:	b8 d1       	rcall	.+880    	; 0x540 <sprintf>
lcd_string(row_num,col_num,bin_buff);
 1d0:	a7 01       	movw	r20, r14
 1d2:	60 2f       	mov	r22, r16
 1d4:	81 2f       	mov	r24, r17
 1d6:	99 d1       	rcall	.+818    	; 0x50a <lcd_string>
}
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	a8 96       	adiw	r28, 0x28	; 40
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	08 95       	ret

000001fe <lcd_print_octal>:
 * @param[in]  row_num  The row number of the LCD
 * @param[in]  col_num  The col number of the LCD
 * @param[in]  num      The number to be printed
 */
void lcd_print_octal(unsigned char row_num, unsigned char col_num, unsigned char num)
{
 1fe:	ef 92       	push	r14
 200:	ff 92       	push	r15
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
 20e:	a8 97       	sbiw	r28, 0x28	; 40
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	de bf       	out	0x3e, r29	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	cd bf       	out	0x3d, r28	; 61
 21a:	f8 2e       	mov	r15, r24
 21c:	e6 2e       	mov	r14, r22
char oct_buffer[40];
sprintf (oct_buffer, "%03o", num);
 21e:	1f 92       	push	r1
 220:	4f 93       	push	r20
 222:	8f e1       	ldi	r24, 0x1F	; 31
 224:	92 e0       	ldi	r25, 0x02	; 2
 226:	9f 93       	push	r25
 228:	8f 93       	push	r24
 22a:	8e 01       	movw	r16, r28
 22c:	0f 5f       	subi	r16, 0xFF	; 255
 22e:	1f 4f       	sbci	r17, 0xFF	; 255
 230:	1f 93       	push	r17
 232:	0f 93       	push	r16
 234:	85 d1       	rcall	.+778    	; 0x540 <sprintf>
lcd_string(row_num,col_num,oct_buffer);	
 236:	a8 01       	movw	r20, r16
 238:	6e 2d       	mov	r22, r14
 23a:	8f 2d       	mov	r24, r15
 23c:	66 d1       	rcall	.+716    	; 0x50a <lcd_string>
}
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
 24a:	a8 96       	adiw	r28, 0x28	; 40
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	ff 90       	pop	r15
 260:	ef 90       	pop	r14
 262:	08 95       	ret

00000264 <lcd_print_decimal>:
 * @param[in]  row_num  The row number of the LCD
 * @param[in]  col_num  The col number of the LCD
 * @param[in]  num      The number to be printed
 */
void lcd_print_decimal(unsigned char row_num, unsigned char col_num, unsigned char num)
{
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	a8 97       	sbiw	r28, 0x28	; 40
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
 280:	f8 2e       	mov	r15, r24
 282:	e6 2e       	mov	r14, r22
	char dec_buffer[40];
	sprintf (dec_buffer, "%03d", num);
 284:	1f 92       	push	r1
 286:	4f 93       	push	r20
 288:	84 e2       	ldi	r24, 0x24	; 36
 28a:	92 e0       	ldi	r25, 0x02	; 2
 28c:	9f 93       	push	r25
 28e:	8f 93       	push	r24
 290:	8e 01       	movw	r16, r28
 292:	0f 5f       	subi	r16, 0xFF	; 255
 294:	1f 4f       	sbci	r17, 0xFF	; 255
 296:	1f 93       	push	r17
 298:	0f 93       	push	r16
 29a:	52 d1       	rcall	.+676    	; 0x540 <sprintf>
	lcd_string(row_num,col_num,dec_buffer);
 29c:	a8 01       	movw	r20, r16
 29e:	6e 2d       	mov	r22, r14
 2a0:	8f 2d       	mov	r24, r15
 2a2:	33 d1       	rcall	.+614    	; 0x50a <lcd_string>
}
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	a8 96       	adiw	r28, 0x28	; 40
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	ff 90       	pop	r15
 2c6:	ef 90       	pop	r14
 2c8:	08 95       	ret

000002ca <lcd_print_hexadecimal>:
 * @param[in]  row_num  The row number of the LCD
 * @param[in]  col_num  The col number of the LCD
 * @param[in]  num      The number to be printed
 */
void lcd_print_hexadecimal(unsigned char row_num, unsigned char col_num, unsigned char num)
{
 2ca:	ef 92       	push	r14
 2cc:	ff 92       	push	r15
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	a8 97       	sbiw	r28, 0x28	; 40
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	de bf       	out	0x3e, r29	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	cd bf       	out	0x3d, r28	; 61
 2e6:	f8 2e       	mov	r15, r24
 2e8:	e6 2e       	mov	r14, r22
char hex_buffer[40];
sprintf (hex_buffer, "%02X", num);
 2ea:	1f 92       	push	r1
 2ec:	4f 93       	push	r20
 2ee:	89 e2       	ldi	r24, 0x29	; 41
 2f0:	92 e0       	ldi	r25, 0x02	; 2
 2f2:	9f 93       	push	r25
 2f4:	8f 93       	push	r24
 2f6:	8e 01       	movw	r16, r28
 2f8:	0f 5f       	subi	r16, 0xFF	; 255
 2fa:	1f 4f       	sbci	r17, 0xFF	; 255
 2fc:	1f 93       	push	r17
 2fe:	0f 93       	push	r16
 300:	1f d1       	rcall	.+574    	; 0x540 <sprintf>
lcd_string(row_num,col_num,hex_buffer);	
 302:	a8 01       	movw	r20, r16
 304:	6e 2d       	mov	r22, r14
 306:	8f 2d       	mov	r24, r15
 308:	00 d1       	rcall	.+512    	; 0x50a <lcd_string>
}
 30a:	0f 90       	pop	r0
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	a8 96       	adiw	r28, 0x28	; 40
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	08 95       	ret

00000330 <main>:
 * @return     0
 */
int main(void){
	
	
	lcd_port_config();					// Initialize the LCD port
 330:	1f d0       	rcall	.+62     	; 0x370 <lcd_port_config>
	lcd_init();							// Initialize the LCD
 332:	93 d0       	rcall	.+294    	; 0x45a <lcd_init>
	lcd_clear();						// Clear the LCD
 334:	be d0       	rcall	.+380    	; 0x4b2 <lcd_clear>
 336:	f6 de       	rcall	.-532    	; 0x124 <lcd_print_wireframe>
	lcd_print_wireframe();				// Print wireframe on the LCD
 338:	c0 e0       	ldi	r28, 0x00	; 0
 33a:	4c 2f       	mov	r20, r28
	unsigned char counter = 0;

	//<< TODO >>: FILL THE BLANK FUNCTION PARAMETERS AS PER THE WIREFRAME RULES IN THE FOLLOWING LINES OF CODE
	while(1)
{
		lcd_print_hexadecimal(1,3,counter);	// Pass the relevant arguments to print hexadecimal characters on the LCD at the place specified by the wireframe
 33c:	63 e0       	ldi	r22, 0x03	; 3
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	c4 df       	rcall	.-120    	; 0x2ca <lcd_print_hexadecimal>
 342:	4c 2f       	mov	r20, r28
		lcd_print_decimal(1,8,counter);		// Pass the relevant arguments to print decimal characters on the LCD at the place specified by the wireframe
 344:	68 e0       	ldi	r22, 0x08	; 8
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	8d df       	rcall	.-230    	; 0x264 <lcd_print_decimal>
 34a:	4c 2f       	mov	r20, r28
		lcd_print_octal(1,14,counter);			// Pass the relevant arguments to print octal characters on the LCD at the place specified by the wireframe
 34c:	6e e0       	ldi	r22, 0x0E	; 14
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	56 df       	rcall	.-340    	; 0x1fe <lcd_print_octal>
 352:	4c 2f       	mov	r20, r28
		lcd_print_binary(2,9,counter);		// Pass the relevant arguments to print binary characters on the LCD at the place specified by the wireframe
 354:	69 e0       	ldi	r22, 0x09	; 9
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	f0 de       	rcall	.-544    	; 0x13a <lcd_print_binary>
 35a:	cf 5f       	subi	r28, 0xFF	; 255
 35c:	2f ef       	ldi	r18, 0xFF	; 255
		counter++;	// Increment the counter
 35e:	8f e7       	ldi	r24, 0x7F	; 127
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 360:	96 e1       	ldi	r25, 0x16	; 22
 362:	21 50       	subi	r18, 0x01	; 1
 364:	80 40       	sbci	r24, 0x00	; 0
 366:	90 40       	sbci	r25, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <main+0x32>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <main+0x3c>
 36c:	00 00       	nop
 36e:	e5 cf       	rjmp	.-54     	; 0x33a <main+0xa>

00000370 <lcd_port_config>:
 370:	87 b1       	in	r24, 0x07	; 7
 372:	87 60       	ori	r24, 0x07	; 7
 * Logic: Passes 0x80 command to LCD using lcd_wr_command
 * Example Call: lcd_home();
 */
void lcd_home (void)
{
	lcd_wr_command(0x80);								// LCD cursor set to Home position
 374:	87 b9       	out	0x07, r24	; 7
 376:	87 b1       	in	r24, 0x07	; 7
 378:	80 6f       	ori	r24, 0xF0	; 240
 37a:	87 b9       	out	0x07, r24	; 7
 37c:	88 b1       	in	r24, 0x08	; 8
 37e:	88 7f       	andi	r24, 0xF8	; 248
 380:	88 b9       	out	0x08, r24	; 8
 382:	88 b1       	in	r24, 0x08	; 8
 384:	8f 70       	andi	r24, 0x0F	; 15
 386:	88 b9       	out	0x08, r24	; 8
 388:	08 95       	ret

0000038a <lcd_set_4bit>:
 38a:	86 e6       	ldi	r24, 0x66	; 102
 38c:	9e e0       	ldi	r25, 0x0E	; 14
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <lcd_set_4bit+0x4>
 392:	00 00       	nop
 394:	40 98       	cbi	0x08, 0	; 8
 396:	41 98       	cbi	0x08, 1	; 8
 398:	80 e3       	ldi	r24, 0x30	; 48
 39a:	88 b9       	out	0x08, r24	; 8
 39c:	42 9a       	sbi	0x08, 2	; 8
 39e:	ef ef       	ldi	r30, 0xFF	; 255
 3a0:	f7 e4       	ldi	r31, 0x47	; 71
 3a2:	31 97       	sbiw	r30, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <lcd_set_4bit+0x18>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <lcd_set_4bit+0x1e>
 3a8:	00 00       	nop
 3aa:	42 98       	cbi	0x08, 2	; 8
 3ac:	e6 e6       	ldi	r30, 0x66	; 102
 3ae:	fe e0       	ldi	r31, 0x0E	; 14
 3b0:	31 97       	sbiw	r30, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <lcd_set_4bit+0x26>
 3b4:	00 00       	nop
 3b6:	40 98       	cbi	0x08, 0	; 8
 3b8:	41 98       	cbi	0x08, 1	; 8
 3ba:	88 b9       	out	0x08, r24	; 8
 3bc:	42 9a       	sbi	0x08, 2	; 8
 3be:	ef ef       	ldi	r30, 0xFF	; 255
 3c0:	f7 e4       	ldi	r31, 0x47	; 71
 3c2:	31 97       	sbiw	r30, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <lcd_set_4bit+0x38>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <lcd_set_4bit+0x3e>
 3c8:	00 00       	nop
 3ca:	42 98       	cbi	0x08, 2	; 8
 3cc:	e6 e6       	ldi	r30, 0x66	; 102
 3ce:	fe e0       	ldi	r31, 0x0E	; 14
 3d0:	31 97       	sbiw	r30, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <lcd_set_4bit+0x46>
 3d4:	00 00       	nop
 3d6:	40 98       	cbi	0x08, 0	; 8
 3d8:	41 98       	cbi	0x08, 1	; 8
 3da:	88 b9       	out	0x08, r24	; 8
 3dc:	42 9a       	sbi	0x08, 2	; 8
 3de:	8f ef       	ldi	r24, 0xFF	; 255
 3e0:	97 e4       	ldi	r25, 0x47	; 71
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <lcd_set_4bit+0x58>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <lcd_set_4bit+0x5e>
 3e8:	00 00       	nop
 3ea:	42 98       	cbi	0x08, 2	; 8
 3ec:	e6 e6       	ldi	r30, 0x66	; 102
 3ee:	fe e0       	ldi	r31, 0x0E	; 14
 3f0:	31 97       	sbiw	r30, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <lcd_set_4bit+0x66>
 3f4:	00 00       	nop
 3f6:	40 98       	cbi	0x08, 0	; 8
 3f8:	41 98       	cbi	0x08, 1	; 8
 3fa:	80 e2       	ldi	r24, 0x20	; 32
 3fc:	88 b9       	out	0x08, r24	; 8
 3fe:	42 9a       	sbi	0x08, 2	; 8
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	97 e4       	ldi	r25, 0x47	; 71
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
 40c:	42 98       	cbi	0x08, 2	; 8
 40e:	08 95       	ret

00000410 <lcd_wr_command>:
 410:	98 b1       	in	r25, 0x08	; 8
 412:	9f 70       	andi	r25, 0x0F	; 15
 414:	98 b9       	out	0x08, r25	; 8
 416:	98 b1       	in	r25, 0x08	; 8
 418:	28 2f       	mov	r18, r24
 41a:	20 7f       	andi	r18, 0xF0	; 240
 41c:	92 2b       	or	r25, r18
 41e:	98 b9       	out	0x08, r25	; 8
 420:	40 98       	cbi	0x08, 0	; 8
 422:	41 98       	cbi	0x08, 1	; 8
 424:	42 9a       	sbi	0x08, 2	; 8
 426:	ef ef       	ldi	r30, 0xFF	; 255
 428:	f7 e4       	ldi	r31, 0x47	; 71
 42a:	31 97       	sbiw	r30, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <lcd_wr_command+0x1a>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <lcd_wr_command+0x20>
 430:	00 00       	nop
 432:	42 98       	cbi	0x08, 2	; 8
 434:	98 b1       	in	r25, 0x08	; 8
 436:	9f 70       	andi	r25, 0x0F	; 15
 438:	98 b9       	out	0x08, r25	; 8
 43a:	98 b1       	in	r25, 0x08	; 8
 43c:	82 95       	swap	r24
 43e:	80 7f       	andi	r24, 0xF0	; 240
 440:	89 2b       	or	r24, r25
 442:	88 b9       	out	0x08, r24	; 8
 444:	40 98       	cbi	0x08, 0	; 8
 446:	41 98       	cbi	0x08, 1	; 8
 448:	42 9a       	sbi	0x08, 2	; 8
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	97 e4       	ldi	r25, 0x47	; 71
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <lcd_wr_command+0x3e>
 452:	00 c0       	rjmp	.+0      	; 0x454 <lcd_wr_command+0x44>
 454:	00 00       	nop
 456:	42 98       	cbi	0x08, 2	; 8
 458:	08 95       	ret

0000045a <lcd_init>:
 45a:	97 df       	rcall	.-210    	; 0x38a <lcd_set_4bit>
 45c:	86 e6       	ldi	r24, 0x66	; 102
 45e:	9e e0       	ldi	r25, 0x0E	; 14
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <lcd_init+0x6>
 464:	00 00       	nop
 466:	88 e2       	ldi	r24, 0x28	; 40
 468:	d3 df       	rcall	.-90     	; 0x410 <lcd_wr_command>
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	d1 df       	rcall	.-94     	; 0x410 <lcd_wr_command>
 46e:	86 e0       	ldi	r24, 0x06	; 6
 470:	cf df       	rcall	.-98     	; 0x410 <lcd_wr_command>
 472:	8e e0       	ldi	r24, 0x0E	; 14
 474:	cd df       	rcall	.-102    	; 0x410 <lcd_wr_command>
 476:	80 e8       	ldi	r24, 0x80	; 128
 478:	cb cf       	rjmp	.-106    	; 0x410 <lcd_wr_command>
 47a:	08 95       	ret

0000047c <lcd_cursor>:
 *
 * Example Call: lcd_cursor(2, 3);
 */
void lcd_cursor (char row, char column)
{
	switch (row)
 47c:	82 30       	cpi	r24, 0x02	; 2
 47e:	69 f0       	breq	.+26     	; 0x49a <lcd_cursor+0x1e>
 480:	18 f4       	brcc	.+6      	; 0x488 <lcd_cursor+0xc>
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	31 f0       	breq	.+12     	; 0x492 <lcd_cursor+0x16>
 486:	08 95       	ret
 488:	83 30       	cpi	r24, 0x03	; 3
 48a:	59 f0       	breq	.+22     	; 0x4a2 <lcd_cursor+0x26>
 48c:	84 30       	cpi	r24, 0x04	; 4
 48e:	69 f0       	breq	.+26     	; 0x4aa <lcd_cursor+0x2e>
 490:	08 95       	ret
	{
		case 1: lcd_wr_command (0x80 + column - 1); break;
 492:	8f e7       	ldi	r24, 0x7F	; 127
 494:	86 0f       	add	r24, r22
 496:	bc cf       	rjmp	.-136    	; 0x410 <lcd_wr_command>
 498:	08 95       	ret
		case 2: lcd_wr_command (0xC0 + column - 1); break;
 49a:	8f eb       	ldi	r24, 0xBF	; 191
 49c:	86 0f       	add	r24, r22
 49e:	b8 cf       	rjmp	.-144    	; 0x410 <lcd_wr_command>
 4a0:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 4a2:	83 e9       	ldi	r24, 0x93	; 147
 4a4:	86 0f       	add	r24, r22
 4a6:	b4 cf       	rjmp	.-152    	; 0x410 <lcd_wr_command>
 4a8:	08 95       	ret
		case 4: lcd_wr_command (0xD4 + column - 1); break;
 4aa:	83 ed       	ldi	r24, 0xD3	; 211
 4ac:	86 0f       	add	r24, r22
 4ae:	b0 cf       	rjmp	.-160    	; 0x410 <lcd_wr_command>
 4b0:	08 95       	ret

000004b2 <lcd_clear>:
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 4b4:	ad cf       	rjmp	.-166    	; 0x410 <lcd_wr_command>
 4b6:	08 95       	ret

000004b8 <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 4b8:	cf 93       	push	r28
 4ba:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 4bc:	df df       	rcall	.-66     	; 0x47c <lcd_cursor>
	
	char temp;
	
	temp = alpha_num_char;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
 4be:	88 b1       	in	r24, 0x08	; 8
 4c0:	8f 70       	andi	r24, 0x0F	; 15
 4c2:	88 b9       	out	0x08, r24	; 8
	lcd_data_port_reg |= temp;
 4c4:	88 b1       	in	r24, 0x08	; 8
 4c6:	9c 2f       	mov	r25, r28
 4c8:	90 7f       	andi	r25, 0xF0	; 240
 4ca:	89 2b       	or	r24, r25
 4cc:	88 b9       	out	0x08, r24	; 8
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 4ce:	40 9a       	sbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 4d0:	41 98       	cbi	0x08, 1	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 4d2:	42 9a       	sbi	0x08, 2	; 8
 4d4:	8f ef       	ldi	r24, 0xFF	; 255
 4d6:	97 e4       	ldi	r25, 0x47	; 71
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <lcd_wr_char+0x20>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <lcd_wr_char+0x26>
 4de:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 4e0:	42 98       	cbi	0x08, 2	; 8
	
	alpha_num_char = (alpha_num_char & 0x0F);
	alpha_num_char = (alpha_num_char << 4);
	lcd_data_port_reg &= 0x0F;
 4e2:	88 b1       	in	r24, 0x08	; 8
 4e4:	8f 70       	andi	r24, 0x0F	; 15
 4e6:	88 b9       	out	0x08, r24	; 8
	lcd_data_port_reg |= alpha_num_char;
 4e8:	88 b1       	in	r24, 0x08	; 8
 4ea:	c2 95       	swap	r28
 4ec:	c0 7f       	andi	r28, 0xF0	; 240
 4ee:	c8 2b       	or	r28, r24
 4f0:	c8 b9       	out	0x08, r28	; 8
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 4f2:	40 9a       	sbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 4f4:	41 98       	cbi	0x08, 1	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 4f6:	42 9a       	sbi	0x08, 2	; 8
 4f8:	8f ef       	ldi	r24, 0xFF	; 255
 4fa:	97 e4       	ldi	r25, 0x47	; 71
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <lcd_wr_char+0x44>
 500:	00 c0       	rjmp	.+0      	; 0x502 <lcd_wr_char+0x4a>
 502:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 504:	42 98       	cbi	0x08, 2	; 8
}
 506:	cf 91       	pop	r28
 508:	08 95       	ret

0000050a <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
 50a:	0f 93       	push	r16
 50c:	1f 93       	push	r17
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	d8 2f       	mov	r29, r24
 514:	c6 2f       	mov	r28, r22
 516:	fa 01       	movw	r30, r20
	while(*str != '\0')
 518:	40 81       	ld	r20, Z
 51a:	44 23       	and	r20, r20
 51c:	61 f0       	breq	.+24     	; 0x536 <lcd_string+0x2c>
 51e:	8f 01       	movw	r16, r30
 520:	0f 5f       	subi	r16, 0xFF	; 255
 522:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(row, column, *str);
 524:	6c 2f       	mov	r22, r28
 526:	8d 2f       	mov	r24, r29
 528:	c7 df       	rcall	.-114    	; 0x4b8 <lcd_wr_char>
		str++;
		column+=1;
 52a:	cf 5f       	subi	r28, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
 52c:	f8 01       	movw	r30, r16
 52e:	41 91       	ld	r20, Z+
 530:	8f 01       	movw	r16, r30
 532:	41 11       	cpse	r20, r1
 534:	f7 cf       	rjmp	.-18     	; 0x524 <lcd_string+0x1a>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	08 95       	ret

00000540 <sprintf>:
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	2e 97       	sbiw	r28, 0x0e	; 14
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	f8 94       	cli
 552:	de bf       	out	0x3e, r29	; 62
 554:	0f be       	out	0x3f, r0	; 63
 556:	cd bf       	out	0x3d, r28	; 61
 558:	0e 89       	ldd	r16, Y+22	; 0x16
 55a:	1f 89       	ldd	r17, Y+23	; 0x17
 55c:	86 e0       	ldi	r24, 0x06	; 6
 55e:	8c 83       	std	Y+4, r24	; 0x04
 560:	1a 83       	std	Y+2, r17	; 0x02
 562:	09 83       	std	Y+1, r16	; 0x01
 564:	8f ef       	ldi	r24, 0xFF	; 255
 566:	9f e7       	ldi	r25, 0x7F	; 127
 568:	9e 83       	std	Y+6, r25	; 0x06
 56a:	8d 83       	std	Y+5, r24	; 0x05
 56c:	ae 01       	movw	r20, r28
 56e:	46 5e       	subi	r20, 0xE6	; 230
 570:	5f 4f       	sbci	r21, 0xFF	; 255
 572:	68 8d       	ldd	r22, Y+24	; 0x18
 574:	79 8d       	ldd	r23, Y+25	; 0x19
 576:	ce 01       	movw	r24, r28
 578:	01 96       	adiw	r24, 0x01	; 1
 57a:	10 d0       	rcall	.+32     	; 0x59c <vfprintf>
 57c:	ef 81       	ldd	r30, Y+7	; 0x07
 57e:	f8 85       	ldd	r31, Y+8	; 0x08
 580:	e0 0f       	add	r30, r16
 582:	f1 1f       	adc	r31, r17
 584:	10 82       	st	Z, r1
 586:	2e 96       	adiw	r28, 0x0e	; 14
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	f8 94       	cli
 58c:	de bf       	out	0x3e, r29	; 62
 58e:	0f be       	out	0x3f, r0	; 63
 590:	cd bf       	out	0x3d, r28	; 61
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	08 95       	ret

0000059c <vfprintf>:
 59c:	2f 92       	push	r2
 59e:	3f 92       	push	r3
 5a0:	4f 92       	push	r4
 5a2:	5f 92       	push	r5
 5a4:	6f 92       	push	r6
 5a6:	7f 92       	push	r7
 5a8:	8f 92       	push	r8
 5aa:	9f 92       	push	r9
 5ac:	af 92       	push	r10
 5ae:	bf 92       	push	r11
 5b0:	cf 92       	push	r12
 5b2:	df 92       	push	r13
 5b4:	ef 92       	push	r14
 5b6:	ff 92       	push	r15
 5b8:	0f 93       	push	r16
 5ba:	1f 93       	push	r17
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
 5c4:	2b 97       	sbiw	r28, 0x0b	; 11
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	f8 94       	cli
 5ca:	de bf       	out	0x3e, r29	; 62
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	cd bf       	out	0x3d, r28	; 61
 5d0:	6c 01       	movw	r12, r24
 5d2:	7b 01       	movw	r14, r22
 5d4:	8a 01       	movw	r16, r20
 5d6:	fc 01       	movw	r30, r24
 5d8:	17 82       	std	Z+7, r1	; 0x07
 5da:	16 82       	std	Z+6, r1	; 0x06
 5dc:	83 81       	ldd	r24, Z+3	; 0x03
 5de:	81 ff       	sbrs	r24, 1
 5e0:	bf c1       	rjmp	.+894    	; 0x960 <vfprintf+0x3c4>
 5e2:	ce 01       	movw	r24, r28
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	3c 01       	movw	r6, r24
 5e8:	f6 01       	movw	r30, r12
 5ea:	93 81       	ldd	r25, Z+3	; 0x03
 5ec:	f7 01       	movw	r30, r14
 5ee:	93 fd       	sbrc	r25, 3
 5f0:	85 91       	lpm	r24, Z+
 5f2:	93 ff       	sbrs	r25, 3
 5f4:	81 91       	ld	r24, Z+
 5f6:	7f 01       	movw	r14, r30
 5f8:	88 23       	and	r24, r24
 5fa:	09 f4       	brne	.+2      	; 0x5fe <vfprintf+0x62>
 5fc:	ad c1       	rjmp	.+858    	; 0x958 <vfprintf+0x3bc>
 5fe:	85 32       	cpi	r24, 0x25	; 37
 600:	39 f4       	brne	.+14     	; 0x610 <vfprintf+0x74>
 602:	93 fd       	sbrc	r25, 3
 604:	85 91       	lpm	r24, Z+
 606:	93 ff       	sbrs	r25, 3
 608:	81 91       	ld	r24, Z+
 60a:	7f 01       	movw	r14, r30
 60c:	85 32       	cpi	r24, 0x25	; 37
 60e:	21 f4       	brne	.+8      	; 0x618 <vfprintf+0x7c>
 610:	b6 01       	movw	r22, r12
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	d6 d1       	rcall	.+940    	; 0x9c2 <fputc>
 616:	e8 cf       	rjmp	.-48     	; 0x5e8 <vfprintf+0x4c>
 618:	91 2c       	mov	r9, r1
 61a:	21 2c       	mov	r2, r1
 61c:	31 2c       	mov	r3, r1
 61e:	ff e1       	ldi	r31, 0x1F	; 31
 620:	f3 15       	cp	r31, r3
 622:	d8 f0       	brcs	.+54     	; 0x65a <vfprintf+0xbe>
 624:	8b 32       	cpi	r24, 0x2B	; 43
 626:	79 f0       	breq	.+30     	; 0x646 <vfprintf+0xaa>
 628:	38 f4       	brcc	.+14     	; 0x638 <vfprintf+0x9c>
 62a:	80 32       	cpi	r24, 0x20	; 32
 62c:	79 f0       	breq	.+30     	; 0x64c <vfprintf+0xb0>
 62e:	83 32       	cpi	r24, 0x23	; 35
 630:	a1 f4       	brne	.+40     	; 0x65a <vfprintf+0xbe>
 632:	23 2d       	mov	r18, r3
 634:	20 61       	ori	r18, 0x10	; 16
 636:	1d c0       	rjmp	.+58     	; 0x672 <vfprintf+0xd6>
 638:	8d 32       	cpi	r24, 0x2D	; 45
 63a:	61 f0       	breq	.+24     	; 0x654 <vfprintf+0xb8>
 63c:	80 33       	cpi	r24, 0x30	; 48
 63e:	69 f4       	brne	.+26     	; 0x65a <vfprintf+0xbe>
 640:	23 2d       	mov	r18, r3
 642:	21 60       	ori	r18, 0x01	; 1
 644:	16 c0       	rjmp	.+44     	; 0x672 <vfprintf+0xd6>
 646:	83 2d       	mov	r24, r3
 648:	82 60       	ori	r24, 0x02	; 2
 64a:	38 2e       	mov	r3, r24
 64c:	e3 2d       	mov	r30, r3
 64e:	e4 60       	ori	r30, 0x04	; 4
 650:	3e 2e       	mov	r3, r30
 652:	2a c0       	rjmp	.+84     	; 0x6a8 <vfprintf+0x10c>
 654:	f3 2d       	mov	r31, r3
 656:	f8 60       	ori	r31, 0x08	; 8
 658:	1d c0       	rjmp	.+58     	; 0x694 <vfprintf+0xf8>
 65a:	37 fc       	sbrc	r3, 7
 65c:	2d c0       	rjmp	.+90     	; 0x6b8 <vfprintf+0x11c>
 65e:	20 ed       	ldi	r18, 0xD0	; 208
 660:	28 0f       	add	r18, r24
 662:	2a 30       	cpi	r18, 0x0A	; 10
 664:	40 f0       	brcs	.+16     	; 0x676 <vfprintf+0xda>
 666:	8e 32       	cpi	r24, 0x2E	; 46
 668:	b9 f4       	brne	.+46     	; 0x698 <vfprintf+0xfc>
 66a:	36 fc       	sbrc	r3, 6
 66c:	75 c1       	rjmp	.+746    	; 0x958 <vfprintf+0x3bc>
 66e:	23 2d       	mov	r18, r3
 670:	20 64       	ori	r18, 0x40	; 64
 672:	32 2e       	mov	r3, r18
 674:	19 c0       	rjmp	.+50     	; 0x6a8 <vfprintf+0x10c>
 676:	36 fe       	sbrs	r3, 6
 678:	06 c0       	rjmp	.+12     	; 0x686 <vfprintf+0xea>
 67a:	8a e0       	ldi	r24, 0x0A	; 10
 67c:	98 9e       	mul	r9, r24
 67e:	20 0d       	add	r18, r0
 680:	11 24       	eor	r1, r1
 682:	92 2e       	mov	r9, r18
 684:	11 c0       	rjmp	.+34     	; 0x6a8 <vfprintf+0x10c>
 686:	ea e0       	ldi	r30, 0x0A	; 10
 688:	2e 9e       	mul	r2, r30
 68a:	20 0d       	add	r18, r0
 68c:	11 24       	eor	r1, r1
 68e:	22 2e       	mov	r2, r18
 690:	f3 2d       	mov	r31, r3
 692:	f0 62       	ori	r31, 0x20	; 32
 694:	3f 2e       	mov	r3, r31
 696:	08 c0       	rjmp	.+16     	; 0x6a8 <vfprintf+0x10c>
 698:	8c 36       	cpi	r24, 0x6C	; 108
 69a:	21 f4       	brne	.+8      	; 0x6a4 <vfprintf+0x108>
 69c:	83 2d       	mov	r24, r3
 69e:	80 68       	ori	r24, 0x80	; 128
 6a0:	38 2e       	mov	r3, r24
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <vfprintf+0x10c>
 6a4:	88 36       	cpi	r24, 0x68	; 104
 6a6:	41 f4       	brne	.+16     	; 0x6b8 <vfprintf+0x11c>
 6a8:	f7 01       	movw	r30, r14
 6aa:	93 fd       	sbrc	r25, 3
 6ac:	85 91       	lpm	r24, Z+
 6ae:	93 ff       	sbrs	r25, 3
 6b0:	81 91       	ld	r24, Z+
 6b2:	7f 01       	movw	r14, r30
 6b4:	81 11       	cpse	r24, r1
 6b6:	b3 cf       	rjmp	.-154    	; 0x61e <vfprintf+0x82>
 6b8:	98 2f       	mov	r25, r24
 6ba:	9f 7d       	andi	r25, 0xDF	; 223
 6bc:	95 54       	subi	r25, 0x45	; 69
 6be:	93 30       	cpi	r25, 0x03	; 3
 6c0:	28 f4       	brcc	.+10     	; 0x6cc <vfprintf+0x130>
 6c2:	0c 5f       	subi	r16, 0xFC	; 252
 6c4:	1f 4f       	sbci	r17, 0xFF	; 255
 6c6:	9f e3       	ldi	r25, 0x3F	; 63
 6c8:	99 83       	std	Y+1, r25	; 0x01
 6ca:	0d c0       	rjmp	.+26     	; 0x6e6 <vfprintf+0x14a>
 6cc:	83 36       	cpi	r24, 0x63	; 99
 6ce:	31 f0       	breq	.+12     	; 0x6dc <vfprintf+0x140>
 6d0:	83 37       	cpi	r24, 0x73	; 115
 6d2:	71 f0       	breq	.+28     	; 0x6f0 <vfprintf+0x154>
 6d4:	83 35       	cpi	r24, 0x53	; 83
 6d6:	09 f0       	breq	.+2      	; 0x6da <vfprintf+0x13e>
 6d8:	55 c0       	rjmp	.+170    	; 0x784 <vfprintf+0x1e8>
 6da:	20 c0       	rjmp	.+64     	; 0x71c <vfprintf+0x180>
 6dc:	f8 01       	movw	r30, r16
 6de:	80 81       	ld	r24, Z
 6e0:	89 83       	std	Y+1, r24	; 0x01
 6e2:	0e 5f       	subi	r16, 0xFE	; 254
 6e4:	1f 4f       	sbci	r17, 0xFF	; 255
 6e6:	88 24       	eor	r8, r8
 6e8:	83 94       	inc	r8
 6ea:	91 2c       	mov	r9, r1
 6ec:	53 01       	movw	r10, r6
 6ee:	12 c0       	rjmp	.+36     	; 0x714 <vfprintf+0x178>
 6f0:	28 01       	movw	r4, r16
 6f2:	f2 e0       	ldi	r31, 0x02	; 2
 6f4:	4f 0e       	add	r4, r31
 6f6:	51 1c       	adc	r5, r1
 6f8:	f8 01       	movw	r30, r16
 6fa:	a0 80       	ld	r10, Z
 6fc:	b1 80       	ldd	r11, Z+1	; 0x01
 6fe:	36 fe       	sbrs	r3, 6
 700:	03 c0       	rjmp	.+6      	; 0x708 <vfprintf+0x16c>
 702:	69 2d       	mov	r22, r9
 704:	70 e0       	ldi	r23, 0x00	; 0
 706:	02 c0       	rjmp	.+4      	; 0x70c <vfprintf+0x170>
 708:	6f ef       	ldi	r22, 0xFF	; 255
 70a:	7f ef       	ldi	r23, 0xFF	; 255
 70c:	c5 01       	movw	r24, r10
 70e:	4e d1       	rcall	.+668    	; 0x9ac <strnlen>
 710:	4c 01       	movw	r8, r24
 712:	82 01       	movw	r16, r4
 714:	f3 2d       	mov	r31, r3
 716:	ff 77       	andi	r31, 0x7F	; 127
 718:	3f 2e       	mov	r3, r31
 71a:	15 c0       	rjmp	.+42     	; 0x746 <vfprintf+0x1aa>
 71c:	28 01       	movw	r4, r16
 71e:	22 e0       	ldi	r18, 0x02	; 2
 720:	42 0e       	add	r4, r18
 722:	51 1c       	adc	r5, r1
 724:	f8 01       	movw	r30, r16
 726:	a0 80       	ld	r10, Z
 728:	b1 80       	ldd	r11, Z+1	; 0x01
 72a:	36 fe       	sbrs	r3, 6
 72c:	03 c0       	rjmp	.+6      	; 0x734 <vfprintf+0x198>
 72e:	69 2d       	mov	r22, r9
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	02 c0       	rjmp	.+4      	; 0x738 <vfprintf+0x19c>
 734:	6f ef       	ldi	r22, 0xFF	; 255
 736:	7f ef       	ldi	r23, 0xFF	; 255
 738:	c5 01       	movw	r24, r10
 73a:	2d d1       	rcall	.+602    	; 0x996 <strnlen_P>
 73c:	4c 01       	movw	r8, r24
 73e:	f3 2d       	mov	r31, r3
 740:	f0 68       	ori	r31, 0x80	; 128
 742:	3f 2e       	mov	r3, r31
 744:	82 01       	movw	r16, r4
 746:	33 fc       	sbrc	r3, 3
 748:	19 c0       	rjmp	.+50     	; 0x77c <vfprintf+0x1e0>
 74a:	82 2d       	mov	r24, r2
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	88 16       	cp	r8, r24
 750:	99 06       	cpc	r9, r25
 752:	a0 f4       	brcc	.+40     	; 0x77c <vfprintf+0x1e0>
 754:	b6 01       	movw	r22, r12
 756:	80 e2       	ldi	r24, 0x20	; 32
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	33 d1       	rcall	.+614    	; 0x9c2 <fputc>
 75c:	2a 94       	dec	r2
 75e:	f5 cf       	rjmp	.-22     	; 0x74a <vfprintf+0x1ae>
 760:	f5 01       	movw	r30, r10
 762:	37 fc       	sbrc	r3, 7
 764:	85 91       	lpm	r24, Z+
 766:	37 fe       	sbrs	r3, 7
 768:	81 91       	ld	r24, Z+
 76a:	5f 01       	movw	r10, r30
 76c:	b6 01       	movw	r22, r12
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	28 d1       	rcall	.+592    	; 0x9c2 <fputc>
 772:	21 10       	cpse	r2, r1
 774:	2a 94       	dec	r2
 776:	21 e0       	ldi	r18, 0x01	; 1
 778:	82 1a       	sub	r8, r18
 77a:	91 08       	sbc	r9, r1
 77c:	81 14       	cp	r8, r1
 77e:	91 04       	cpc	r9, r1
 780:	79 f7       	brne	.-34     	; 0x760 <vfprintf+0x1c4>
 782:	e1 c0       	rjmp	.+450    	; 0x946 <vfprintf+0x3aa>
 784:	84 36       	cpi	r24, 0x64	; 100
 786:	11 f0       	breq	.+4      	; 0x78c <vfprintf+0x1f0>
 788:	89 36       	cpi	r24, 0x69	; 105
 78a:	39 f5       	brne	.+78     	; 0x7da <vfprintf+0x23e>
 78c:	f8 01       	movw	r30, r16
 78e:	37 fe       	sbrs	r3, 7
 790:	07 c0       	rjmp	.+14     	; 0x7a0 <vfprintf+0x204>
 792:	60 81       	ld	r22, Z
 794:	71 81       	ldd	r23, Z+1	; 0x01
 796:	82 81       	ldd	r24, Z+2	; 0x02
 798:	93 81       	ldd	r25, Z+3	; 0x03
 79a:	0c 5f       	subi	r16, 0xFC	; 252
 79c:	1f 4f       	sbci	r17, 0xFF	; 255
 79e:	08 c0       	rjmp	.+16     	; 0x7b0 <vfprintf+0x214>
 7a0:	60 81       	ld	r22, Z
 7a2:	71 81       	ldd	r23, Z+1	; 0x01
 7a4:	07 2e       	mov	r0, r23
 7a6:	00 0c       	add	r0, r0
 7a8:	88 0b       	sbc	r24, r24
 7aa:	99 0b       	sbc	r25, r25
 7ac:	0e 5f       	subi	r16, 0xFE	; 254
 7ae:	1f 4f       	sbci	r17, 0xFF	; 255
 7b0:	f3 2d       	mov	r31, r3
 7b2:	ff 76       	andi	r31, 0x6F	; 111
 7b4:	3f 2e       	mov	r3, r31
 7b6:	97 ff       	sbrs	r25, 7
 7b8:	09 c0       	rjmp	.+18     	; 0x7cc <vfprintf+0x230>
 7ba:	90 95       	com	r25
 7bc:	80 95       	com	r24
 7be:	70 95       	com	r23
 7c0:	61 95       	neg	r22
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	8f 4f       	sbci	r24, 0xFF	; 255
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	f0 68       	ori	r31, 0x80	; 128
 7ca:	3f 2e       	mov	r3, r31
 7cc:	2a e0       	ldi	r18, 0x0A	; 10
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	a3 01       	movw	r20, r6
 7d2:	33 d1       	rcall	.+614    	; 0xa3a <__ultoa_invert>
 7d4:	88 2e       	mov	r8, r24
 7d6:	86 18       	sub	r8, r6
 7d8:	44 c0       	rjmp	.+136    	; 0x862 <vfprintf+0x2c6>
 7da:	85 37       	cpi	r24, 0x75	; 117
 7dc:	31 f4       	brne	.+12     	; 0x7ea <vfprintf+0x24e>
 7de:	23 2d       	mov	r18, r3
 7e0:	2f 7e       	andi	r18, 0xEF	; 239
 7e2:	b2 2e       	mov	r11, r18
 7e4:	2a e0       	ldi	r18, 0x0A	; 10
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	25 c0       	rjmp	.+74     	; 0x834 <vfprintf+0x298>
 7ea:	93 2d       	mov	r25, r3
 7ec:	99 7f       	andi	r25, 0xF9	; 249
 7ee:	b9 2e       	mov	r11, r25
 7f0:	8f 36       	cpi	r24, 0x6F	; 111
 7f2:	c1 f0       	breq	.+48     	; 0x824 <vfprintf+0x288>
 7f4:	18 f4       	brcc	.+6      	; 0x7fc <vfprintf+0x260>
 7f6:	88 35       	cpi	r24, 0x58	; 88
 7f8:	79 f0       	breq	.+30     	; 0x818 <vfprintf+0x27c>
 7fa:	ae c0       	rjmp	.+348    	; 0x958 <vfprintf+0x3bc>
 7fc:	80 37       	cpi	r24, 0x70	; 112
 7fe:	19 f0       	breq	.+6      	; 0x806 <vfprintf+0x26a>
 800:	88 37       	cpi	r24, 0x78	; 120
 802:	21 f0       	breq	.+8      	; 0x80c <vfprintf+0x270>
 804:	a9 c0       	rjmp	.+338    	; 0x958 <vfprintf+0x3bc>
 806:	e9 2f       	mov	r30, r25
 808:	e0 61       	ori	r30, 0x10	; 16
 80a:	be 2e       	mov	r11, r30
 80c:	b4 fe       	sbrs	r11, 4
 80e:	0d c0       	rjmp	.+26     	; 0x82a <vfprintf+0x28e>
 810:	fb 2d       	mov	r31, r11
 812:	f4 60       	ori	r31, 0x04	; 4
 814:	bf 2e       	mov	r11, r31
 816:	09 c0       	rjmp	.+18     	; 0x82a <vfprintf+0x28e>
 818:	34 fe       	sbrs	r3, 4
 81a:	0a c0       	rjmp	.+20     	; 0x830 <vfprintf+0x294>
 81c:	29 2f       	mov	r18, r25
 81e:	26 60       	ori	r18, 0x06	; 6
 820:	b2 2e       	mov	r11, r18
 822:	06 c0       	rjmp	.+12     	; 0x830 <vfprintf+0x294>
 824:	28 e0       	ldi	r18, 0x08	; 8
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	05 c0       	rjmp	.+10     	; 0x834 <vfprintf+0x298>
 82a:	20 e1       	ldi	r18, 0x10	; 16
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	02 c0       	rjmp	.+4      	; 0x834 <vfprintf+0x298>
 830:	20 e1       	ldi	r18, 0x10	; 16
 832:	32 e0       	ldi	r19, 0x02	; 2
 834:	f8 01       	movw	r30, r16
 836:	b7 fe       	sbrs	r11, 7
 838:	07 c0       	rjmp	.+14     	; 0x848 <vfprintf+0x2ac>
 83a:	60 81       	ld	r22, Z
 83c:	71 81       	ldd	r23, Z+1	; 0x01
 83e:	82 81       	ldd	r24, Z+2	; 0x02
 840:	93 81       	ldd	r25, Z+3	; 0x03
 842:	0c 5f       	subi	r16, 0xFC	; 252
 844:	1f 4f       	sbci	r17, 0xFF	; 255
 846:	06 c0       	rjmp	.+12     	; 0x854 <vfprintf+0x2b8>
 848:	60 81       	ld	r22, Z
 84a:	71 81       	ldd	r23, Z+1	; 0x01
 84c:	80 e0       	ldi	r24, 0x00	; 0
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	0e 5f       	subi	r16, 0xFE	; 254
 852:	1f 4f       	sbci	r17, 0xFF	; 255
 854:	a3 01       	movw	r20, r6
 856:	f1 d0       	rcall	.+482    	; 0xa3a <__ultoa_invert>
 858:	88 2e       	mov	r8, r24
 85a:	86 18       	sub	r8, r6
 85c:	fb 2d       	mov	r31, r11
 85e:	ff 77       	andi	r31, 0x7F	; 127
 860:	3f 2e       	mov	r3, r31
 862:	36 fe       	sbrs	r3, 6
 864:	0d c0       	rjmp	.+26     	; 0x880 <vfprintf+0x2e4>
 866:	23 2d       	mov	r18, r3
 868:	2e 7f       	andi	r18, 0xFE	; 254
 86a:	a2 2e       	mov	r10, r18
 86c:	89 14       	cp	r8, r9
 86e:	58 f4       	brcc	.+22     	; 0x886 <vfprintf+0x2ea>
 870:	34 fe       	sbrs	r3, 4
 872:	0b c0       	rjmp	.+22     	; 0x88a <vfprintf+0x2ee>
 874:	32 fc       	sbrc	r3, 2
 876:	09 c0       	rjmp	.+18     	; 0x88a <vfprintf+0x2ee>
 878:	83 2d       	mov	r24, r3
 87a:	8e 7e       	andi	r24, 0xEE	; 238
 87c:	a8 2e       	mov	r10, r24
 87e:	05 c0       	rjmp	.+10     	; 0x88a <vfprintf+0x2ee>
 880:	b8 2c       	mov	r11, r8
 882:	a3 2c       	mov	r10, r3
 884:	03 c0       	rjmp	.+6      	; 0x88c <vfprintf+0x2f0>
 886:	b8 2c       	mov	r11, r8
 888:	01 c0       	rjmp	.+2      	; 0x88c <vfprintf+0x2f0>
 88a:	b9 2c       	mov	r11, r9
 88c:	a4 fe       	sbrs	r10, 4
 88e:	0f c0       	rjmp	.+30     	; 0x8ae <vfprintf+0x312>
 890:	fe 01       	movw	r30, r28
 892:	e8 0d       	add	r30, r8
 894:	f1 1d       	adc	r31, r1
 896:	80 81       	ld	r24, Z
 898:	80 33       	cpi	r24, 0x30	; 48
 89a:	21 f4       	brne	.+8      	; 0x8a4 <vfprintf+0x308>
 89c:	9a 2d       	mov	r25, r10
 89e:	99 7e       	andi	r25, 0xE9	; 233
 8a0:	a9 2e       	mov	r10, r25
 8a2:	09 c0       	rjmp	.+18     	; 0x8b6 <vfprintf+0x31a>
 8a4:	a2 fe       	sbrs	r10, 2
 8a6:	06 c0       	rjmp	.+12     	; 0x8b4 <vfprintf+0x318>
 8a8:	b3 94       	inc	r11
 8aa:	b3 94       	inc	r11
 8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <vfprintf+0x31a>
 8ae:	8a 2d       	mov	r24, r10
 8b0:	86 78       	andi	r24, 0x86	; 134
 8b2:	09 f0       	breq	.+2      	; 0x8b6 <vfprintf+0x31a>
 8b4:	b3 94       	inc	r11
 8b6:	a3 fc       	sbrc	r10, 3
 8b8:	10 c0       	rjmp	.+32     	; 0x8da <vfprintf+0x33e>
 8ba:	a0 fe       	sbrs	r10, 0
 8bc:	06 c0       	rjmp	.+12     	; 0x8ca <vfprintf+0x32e>
 8be:	b2 14       	cp	r11, r2
 8c0:	80 f4       	brcc	.+32     	; 0x8e2 <vfprintf+0x346>
 8c2:	28 0c       	add	r2, r8
 8c4:	92 2c       	mov	r9, r2
 8c6:	9b 18       	sub	r9, r11
 8c8:	0d c0       	rjmp	.+26     	; 0x8e4 <vfprintf+0x348>
 8ca:	b2 14       	cp	r11, r2
 8cc:	58 f4       	brcc	.+22     	; 0x8e4 <vfprintf+0x348>
 8ce:	b6 01       	movw	r22, r12
 8d0:	80 e2       	ldi	r24, 0x20	; 32
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	76 d0       	rcall	.+236    	; 0x9c2 <fputc>
 8d6:	b3 94       	inc	r11
 8d8:	f8 cf       	rjmp	.-16     	; 0x8ca <vfprintf+0x32e>
 8da:	b2 14       	cp	r11, r2
 8dc:	18 f4       	brcc	.+6      	; 0x8e4 <vfprintf+0x348>
 8de:	2b 18       	sub	r2, r11
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <vfprintf+0x34a>
 8e2:	98 2c       	mov	r9, r8
 8e4:	21 2c       	mov	r2, r1
 8e6:	a4 fe       	sbrs	r10, 4
 8e8:	0f c0       	rjmp	.+30     	; 0x908 <vfprintf+0x36c>
 8ea:	b6 01       	movw	r22, r12
 8ec:	80 e3       	ldi	r24, 0x30	; 48
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	68 d0       	rcall	.+208    	; 0x9c2 <fputc>
 8f2:	a2 fe       	sbrs	r10, 2
 8f4:	16 c0       	rjmp	.+44     	; 0x922 <vfprintf+0x386>
 8f6:	a1 fc       	sbrc	r10, 1
 8f8:	03 c0       	rjmp	.+6      	; 0x900 <vfprintf+0x364>
 8fa:	88 e7       	ldi	r24, 0x78	; 120
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	02 c0       	rjmp	.+4      	; 0x904 <vfprintf+0x368>
 900:	88 e5       	ldi	r24, 0x58	; 88
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	b6 01       	movw	r22, r12
 906:	0c c0       	rjmp	.+24     	; 0x920 <vfprintf+0x384>
 908:	8a 2d       	mov	r24, r10
 90a:	86 78       	andi	r24, 0x86	; 134
 90c:	51 f0       	breq	.+20     	; 0x922 <vfprintf+0x386>
 90e:	a1 fe       	sbrs	r10, 1
 910:	02 c0       	rjmp	.+4      	; 0x916 <vfprintf+0x37a>
 912:	8b e2       	ldi	r24, 0x2B	; 43
 914:	01 c0       	rjmp	.+2      	; 0x918 <vfprintf+0x37c>
 916:	80 e2       	ldi	r24, 0x20	; 32
 918:	a7 fc       	sbrc	r10, 7
 91a:	8d e2       	ldi	r24, 0x2D	; 45
 91c:	b6 01       	movw	r22, r12
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	50 d0       	rcall	.+160    	; 0x9c2 <fputc>
 922:	89 14       	cp	r8, r9
 924:	30 f4       	brcc	.+12     	; 0x932 <vfprintf+0x396>
 926:	b6 01       	movw	r22, r12
 928:	80 e3       	ldi	r24, 0x30	; 48
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	4a d0       	rcall	.+148    	; 0x9c2 <fputc>
 92e:	9a 94       	dec	r9
 930:	f8 cf       	rjmp	.-16     	; 0x922 <vfprintf+0x386>
 932:	8a 94       	dec	r8
 934:	f3 01       	movw	r30, r6
 936:	e8 0d       	add	r30, r8
 938:	f1 1d       	adc	r31, r1
 93a:	80 81       	ld	r24, Z
 93c:	b6 01       	movw	r22, r12
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	40 d0       	rcall	.+128    	; 0x9c2 <fputc>
 942:	81 10       	cpse	r8, r1
 944:	f6 cf       	rjmp	.-20     	; 0x932 <vfprintf+0x396>
 946:	22 20       	and	r2, r2
 948:	09 f4       	brne	.+2      	; 0x94c <vfprintf+0x3b0>
 94a:	4e ce       	rjmp	.-868    	; 0x5e8 <vfprintf+0x4c>
 94c:	b6 01       	movw	r22, r12
 94e:	80 e2       	ldi	r24, 0x20	; 32
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	37 d0       	rcall	.+110    	; 0x9c2 <fputc>
 954:	2a 94       	dec	r2
 956:	f7 cf       	rjmp	.-18     	; 0x946 <vfprintf+0x3aa>
 958:	f6 01       	movw	r30, r12
 95a:	86 81       	ldd	r24, Z+6	; 0x06
 95c:	97 81       	ldd	r25, Z+7	; 0x07
 95e:	02 c0       	rjmp	.+4      	; 0x964 <vfprintf+0x3c8>
 960:	8f ef       	ldi	r24, 0xFF	; 255
 962:	9f ef       	ldi	r25, 0xFF	; 255
 964:	2b 96       	adiw	r28, 0x0b	; 11
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	f8 94       	cli
 96a:	de bf       	out	0x3e, r29	; 62
 96c:	0f be       	out	0x3f, r0	; 63
 96e:	cd bf       	out	0x3d, r28	; 61
 970:	df 91       	pop	r29
 972:	cf 91       	pop	r28
 974:	1f 91       	pop	r17
 976:	0f 91       	pop	r16
 978:	ff 90       	pop	r15
 97a:	ef 90       	pop	r14
 97c:	df 90       	pop	r13
 97e:	cf 90       	pop	r12
 980:	bf 90       	pop	r11
 982:	af 90       	pop	r10
 984:	9f 90       	pop	r9
 986:	8f 90       	pop	r8
 988:	7f 90       	pop	r7
 98a:	6f 90       	pop	r6
 98c:	5f 90       	pop	r5
 98e:	4f 90       	pop	r4
 990:	3f 90       	pop	r3
 992:	2f 90       	pop	r2
 994:	08 95       	ret

00000996 <strnlen_P>:
 996:	fc 01       	movw	r30, r24
 998:	05 90       	lpm	r0, Z+
 99a:	61 50       	subi	r22, 0x01	; 1
 99c:	70 40       	sbci	r23, 0x00	; 0
 99e:	01 10       	cpse	r0, r1
 9a0:	d8 f7       	brcc	.-10     	; 0x998 <strnlen_P+0x2>
 9a2:	80 95       	com	r24
 9a4:	90 95       	com	r25
 9a6:	8e 0f       	add	r24, r30
 9a8:	9f 1f       	adc	r25, r31
 9aa:	08 95       	ret

000009ac <strnlen>:
 9ac:	fc 01       	movw	r30, r24
 9ae:	61 50       	subi	r22, 0x01	; 1
 9b0:	70 40       	sbci	r23, 0x00	; 0
 9b2:	01 90       	ld	r0, Z+
 9b4:	01 10       	cpse	r0, r1
 9b6:	d8 f7       	brcc	.-10     	; 0x9ae <strnlen+0x2>
 9b8:	80 95       	com	r24
 9ba:	90 95       	com	r25
 9bc:	8e 0f       	add	r24, r30
 9be:	9f 1f       	adc	r25, r31
 9c0:	08 95       	ret

000009c2 <fputc>:
 9c2:	0f 93       	push	r16
 9c4:	1f 93       	push	r17
 9c6:	cf 93       	push	r28
 9c8:	df 93       	push	r29
 9ca:	fb 01       	movw	r30, r22
 9cc:	23 81       	ldd	r18, Z+3	; 0x03
 9ce:	21 fd       	sbrc	r18, 1
 9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <fputc+0x16>
 9d2:	8f ef       	ldi	r24, 0xFF	; 255
 9d4:	9f ef       	ldi	r25, 0xFF	; 255
 9d6:	2c c0       	rjmp	.+88     	; 0xa30 <fputc+0x6e>
 9d8:	22 ff       	sbrs	r18, 2
 9da:	16 c0       	rjmp	.+44     	; 0xa08 <fputc+0x46>
 9dc:	46 81       	ldd	r20, Z+6	; 0x06
 9de:	57 81       	ldd	r21, Z+7	; 0x07
 9e0:	24 81       	ldd	r18, Z+4	; 0x04
 9e2:	35 81       	ldd	r19, Z+5	; 0x05
 9e4:	42 17       	cp	r20, r18
 9e6:	53 07       	cpc	r21, r19
 9e8:	44 f4       	brge	.+16     	; 0x9fa <fputc+0x38>
 9ea:	a0 81       	ld	r26, Z
 9ec:	b1 81       	ldd	r27, Z+1	; 0x01
 9ee:	9d 01       	movw	r18, r26
 9f0:	2f 5f       	subi	r18, 0xFF	; 255
 9f2:	3f 4f       	sbci	r19, 0xFF	; 255
 9f4:	31 83       	std	Z+1, r19	; 0x01
 9f6:	20 83       	st	Z, r18
 9f8:	8c 93       	st	X, r24
 9fa:	26 81       	ldd	r18, Z+6	; 0x06
 9fc:	37 81       	ldd	r19, Z+7	; 0x07
 9fe:	2f 5f       	subi	r18, 0xFF	; 255
 a00:	3f 4f       	sbci	r19, 0xFF	; 255
 a02:	37 83       	std	Z+7, r19	; 0x07
 a04:	26 83       	std	Z+6, r18	; 0x06
 a06:	14 c0       	rjmp	.+40     	; 0xa30 <fputc+0x6e>
 a08:	8b 01       	movw	r16, r22
 a0a:	ec 01       	movw	r28, r24
 a0c:	fb 01       	movw	r30, r22
 a0e:	00 84       	ldd	r0, Z+8	; 0x08
 a10:	f1 85       	ldd	r31, Z+9	; 0x09
 a12:	e0 2d       	mov	r30, r0
 a14:	19 95       	eicall
 a16:	89 2b       	or	r24, r25
 a18:	e1 f6       	brne	.-72     	; 0x9d2 <fputc+0x10>
 a1a:	d8 01       	movw	r26, r16
 a1c:	16 96       	adiw	r26, 0x06	; 6
 a1e:	8d 91       	ld	r24, X+
 a20:	9c 91       	ld	r25, X
 a22:	17 97       	sbiw	r26, 0x07	; 7
 a24:	01 96       	adiw	r24, 0x01	; 1
 a26:	17 96       	adiw	r26, 0x07	; 7
 a28:	9c 93       	st	X, r25
 a2a:	8e 93       	st	-X, r24
 a2c:	16 97       	sbiw	r26, 0x06	; 6
 a2e:	ce 01       	movw	r24, r28
 a30:	df 91       	pop	r29
 a32:	cf 91       	pop	r28
 a34:	1f 91       	pop	r17
 a36:	0f 91       	pop	r16
 a38:	08 95       	ret

00000a3a <__ultoa_invert>:
 a3a:	fa 01       	movw	r30, r20
 a3c:	aa 27       	eor	r26, r26
 a3e:	28 30       	cpi	r18, 0x08	; 8
 a40:	51 f1       	breq	.+84     	; 0xa96 <__ultoa_invert+0x5c>
 a42:	20 31       	cpi	r18, 0x10	; 16
 a44:	81 f1       	breq	.+96     	; 0xaa6 <__ultoa_invert+0x6c>
 a46:	e8 94       	clt
 a48:	6f 93       	push	r22
 a4a:	6e 7f       	andi	r22, 0xFE	; 254
 a4c:	6e 5f       	subi	r22, 0xFE	; 254
 a4e:	7f 4f       	sbci	r23, 0xFF	; 255
 a50:	8f 4f       	sbci	r24, 0xFF	; 255
 a52:	9f 4f       	sbci	r25, 0xFF	; 255
 a54:	af 4f       	sbci	r26, 0xFF	; 255
 a56:	b1 e0       	ldi	r27, 0x01	; 1
 a58:	3e d0       	rcall	.+124    	; 0xad6 <__ultoa_invert+0x9c>
 a5a:	b4 e0       	ldi	r27, 0x04	; 4
 a5c:	3c d0       	rcall	.+120    	; 0xad6 <__ultoa_invert+0x9c>
 a5e:	67 0f       	add	r22, r23
 a60:	78 1f       	adc	r23, r24
 a62:	89 1f       	adc	r24, r25
 a64:	9a 1f       	adc	r25, r26
 a66:	a1 1d       	adc	r26, r1
 a68:	68 0f       	add	r22, r24
 a6a:	79 1f       	adc	r23, r25
 a6c:	8a 1f       	adc	r24, r26
 a6e:	91 1d       	adc	r25, r1
 a70:	a1 1d       	adc	r26, r1
 a72:	6a 0f       	add	r22, r26
 a74:	71 1d       	adc	r23, r1
 a76:	81 1d       	adc	r24, r1
 a78:	91 1d       	adc	r25, r1
 a7a:	a1 1d       	adc	r26, r1
 a7c:	20 d0       	rcall	.+64     	; 0xabe <__ultoa_invert+0x84>
 a7e:	09 f4       	brne	.+2      	; 0xa82 <__ultoa_invert+0x48>
 a80:	68 94       	set
 a82:	3f 91       	pop	r19
 a84:	2a e0       	ldi	r18, 0x0A	; 10
 a86:	26 9f       	mul	r18, r22
 a88:	11 24       	eor	r1, r1
 a8a:	30 19       	sub	r19, r0
 a8c:	30 5d       	subi	r19, 0xD0	; 208
 a8e:	31 93       	st	Z+, r19
 a90:	de f6       	brtc	.-74     	; 0xa48 <__ultoa_invert+0xe>
 a92:	cf 01       	movw	r24, r30
 a94:	08 95       	ret
 a96:	46 2f       	mov	r20, r22
 a98:	47 70       	andi	r20, 0x07	; 7
 a9a:	40 5d       	subi	r20, 0xD0	; 208
 a9c:	41 93       	st	Z+, r20
 a9e:	b3 e0       	ldi	r27, 0x03	; 3
 aa0:	0f d0       	rcall	.+30     	; 0xac0 <__ultoa_invert+0x86>
 aa2:	c9 f7       	brne	.-14     	; 0xa96 <__ultoa_invert+0x5c>
 aa4:	f6 cf       	rjmp	.-20     	; 0xa92 <__ultoa_invert+0x58>
 aa6:	46 2f       	mov	r20, r22
 aa8:	4f 70       	andi	r20, 0x0F	; 15
 aaa:	40 5d       	subi	r20, 0xD0	; 208
 aac:	4a 33       	cpi	r20, 0x3A	; 58
 aae:	18 f0       	brcs	.+6      	; 0xab6 <__ultoa_invert+0x7c>
 ab0:	49 5d       	subi	r20, 0xD9	; 217
 ab2:	31 fd       	sbrc	r19, 1
 ab4:	40 52       	subi	r20, 0x20	; 32
 ab6:	41 93       	st	Z+, r20
 ab8:	02 d0       	rcall	.+4      	; 0xabe <__ultoa_invert+0x84>
 aba:	a9 f7       	brne	.-22     	; 0xaa6 <__ultoa_invert+0x6c>
 abc:	ea cf       	rjmp	.-44     	; 0xa92 <__ultoa_invert+0x58>
 abe:	b4 e0       	ldi	r27, 0x04	; 4
 ac0:	a6 95       	lsr	r26
 ac2:	97 95       	ror	r25
 ac4:	87 95       	ror	r24
 ac6:	77 95       	ror	r23
 ac8:	67 95       	ror	r22
 aca:	ba 95       	dec	r27
 acc:	c9 f7       	brne	.-14     	; 0xac0 <__ultoa_invert+0x86>
 ace:	00 97       	sbiw	r24, 0x00	; 0
 ad0:	61 05       	cpc	r22, r1
 ad2:	71 05       	cpc	r23, r1
 ad4:	08 95       	ret
 ad6:	9b 01       	movw	r18, r22
 ad8:	ac 01       	movw	r20, r24
 ada:	0a 2e       	mov	r0, r26
 adc:	06 94       	lsr	r0
 ade:	57 95       	ror	r21
 ae0:	47 95       	ror	r20
 ae2:	37 95       	ror	r19
 ae4:	27 95       	ror	r18
 ae6:	ba 95       	dec	r27
 ae8:	c9 f7       	brne	.-14     	; 0xadc <__ultoa_invert+0xa2>
 aea:	62 0f       	add	r22, r18
 aec:	73 1f       	adc	r23, r19
 aee:	84 1f       	adc	r24, r20
 af0:	95 1f       	adc	r25, r21
 af2:	a0 1d       	adc	r26, r0
 af4:	08 95       	ret

00000af6 <_exit>:
 af6:	f8 94       	cli

00000af8 <__stop_program>:
 af8:	ff cf       	rjmp	.-2      	; 0xaf8 <__stop_program>
