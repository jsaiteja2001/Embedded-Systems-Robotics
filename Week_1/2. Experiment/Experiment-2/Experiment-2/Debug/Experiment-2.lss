
Experiment-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000de8  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c85  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b9  00000000  00000000  00001d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000020c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000628  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000027a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	2f d0       	rcall	.+94     	; 0x154 <main>
  f6:	48 c0       	rjmp	.+144    	; 0x188 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <bar_graph_led_pins_config>:
 */
void bar_graph_led_pins_config() {
	// << NOTE >> : Use Masking and Shift Operators here
	
	// Make **ONLY** 2nd, 6th and 8th Bar-graph LED pins as output
	bar_graph_led_ddr_reg	|=((1 << bar_graph_led_2_pin ) | (1 << bar_graph_led_6_pin ) | (1 << bar_graph_led_8_pin)) ;
  fa:	e4 e0       	ldi	r30, 0x04	; 4
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	80 81       	ld	r24, Z
 100:	82 6a       	ori	r24, 0xA2	; 162
 102:	80 83       	st	Z, r24
	
	// Set **ONLY** 2nd Bar-graph LED as high (ON)
	bar_graph_led_port_reg	|=(1 << bar_graph_led_2_pin ) ;
 104:	e5 e0       	ldi	r30, 0x05	; 5
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	80 81       	ld	r24, Z
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <interrupt_sw_pin_config>:
 */
void interrupt_sw_pin_config(void) {
	// << NOTE >> : Use Masking and Shift Operators here
	
	// Makes **ONLY** Interrupt Switch pin as input
	interrupt_sw_ddr_reg &= (~( 1 << interrupt_sw_pin ) ) ;
 110:	6f 98       	cbi	0x0d, 7	; 13
	
	// Makes **ONLY** Interrupt Switch pin internally pull-up
	interrupt_sw_port_reg |= ( (1 << interrupt_sw_pin) ) ;
 112:	77 9a       	sbi	0x0e, 7	; 14
 114:	08 95       	ret

00000116 <interrupt_switch_pressed>:
 * @brief      Checks if Interrupt Switch is pressed or not
 *
 * @return     boolean true if Interrupt Switch is pressed, else false.
 */
bool interrupt_switch_pressed(void)
{
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	67 99       	sbic	0x0c, 7	; 12
 11a:	80 e0       	ldi	r24, 0x00	; 0
	/*
	<< TODO >> :
		1. Write an if-else statement with a condition which checks whether the Interrupt Switch is pressed or not.
		2. If the Interrupt Switch is pressed return true, else return false
	*/
}
 11c:	08 95       	ret

0000011e <turn_on_bar_graph_led>:
 */
void turn_on_bar_graph_led(unsigned char led_pin) {
	// << NOTE >> : Use Masking and Shift Operators here
	
	// Set **ONLY** a particular Bar-graph LED pin as high (ON)
	bar_graph_led_port_reg	|=(1 << led_pin );
 11e:	e5 e0       	ldi	r30, 0x05	; 5
 120:	f1 e0       	ldi	r31, 0x01	; 1
 122:	90 81       	ld	r25, Z
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <turn_on_bar_graph_led+0x10>
 12a:	22 0f       	add	r18, r18
 12c:	33 1f       	adc	r19, r19
 12e:	8a 95       	dec	r24
 130:	e2 f7       	brpl	.-8      	; 0x12a <turn_on_bar_graph_led+0xc>
 132:	29 2b       	or	r18, r25
 134:	20 83       	st	Z, r18
 136:	08 95       	ret

00000138 <turn_off_bar_graph_led>:
 */
void turn_off_bar_graph_led(unsigned char led_pin) {
	// << NOTE >> : Use Masking and Shift Operators here
	
	// Set **ONLY** a particular Bar-graph LED pin as low (OFF)
	bar_graph_led_port_reg	&=(~(1 << led_pin ));
 138:	e5 e0       	ldi	r30, 0x05	; 5
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	90 81       	ld	r25, Z
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <turn_off_bar_graph_led+0x10>
 144:	22 0f       	add	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	8a 95       	dec	r24
 14a:	e2 f7       	brpl	.-8      	; 0x144 <turn_off_bar_graph_led+0xc>
 14c:	20 95       	com	r18
 14e:	29 23       	and	r18, r25
 150:	20 83       	st	Z, r18
 152:	08 95       	ret

00000154 <main>:
 */
int main() {
	
	// << NOTE >> : You are not allowed to modify or change anything inside this function
	
	bar_graph_led_pins_config();									// Initialize the 2nd, 6th and 8th Bar-graph LEDs
 154:	d2 df       	rcall	.-92     	; 0xfa <bar_graph_led_pins_config>
	interrupt_sw_pin_config();										// Initialize the Interrupt Switch
 156:	dc df       	rcall	.-72     	; 0x110 <interrupt_sw_pin_config>
	
	turn_on_bar_graph_led(bar_graph_led_6_pin);					// Turn ON 6th Bar-graph LED
 158:	85 e0       	ldi	r24, 0x05	; 5
 15a:	e1 df       	rcall	.-62     	; 0x11e <turn_on_bar_graph_led>
	
	while (1)
	{
		if ( interrupt_switch_pressed() )
 15c:	dc df       	rcall	.-72     	; 0x116 <interrupt_switch_pressed>
 15e:	88 23       	and	r24, r24
 160:	71 f0       	breq	.+28     	; 0x17e <main+0x2a>
		{
			turn_off_bar_graph_led(bar_graph_led_2_pin);			// Turn OFF 2nd Bar-graph LED
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	e9 df       	rcall	.-46     	; 0x138 <turn_off_bar_graph_led>
 166:	87 e0       	ldi	r24, 0x07	; 7
			turn_on_bar_graph_led(bar_graph_led_8_pin);				// Turn ON 8th Bar-graph LED
 168:	da df       	rcall	.-76     	; 0x11e <turn_on_bar_graph_led>
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x1c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x26>
 17a:	00 00       	nop
 17c:	ef cf       	rjmp	.-34     	; 0x15c <main+0x8>
				Introducing a delay is the simplest way of mitigating for switch bounce and this process is called de-bouncing.
			*/
		}
		else
		{
			turn_on_bar_graph_led(bar_graph_led_2_pin);				// Turn ON 2nd Bar-graph LED
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	ce df       	rcall	.-100    	; 0x11e <turn_on_bar_graph_led>
 182:	87 e0       	ldi	r24, 0x07	; 7
			turn_off_bar_graph_led(bar_graph_led_8_pin);			// Turn OFF 8th Bar-graph LED
 184:	d9 df       	rcall	.-78     	; 0x138 <turn_off_bar_graph_led>
 186:	ea cf       	rjmp	.-44     	; 0x15c <main+0x8>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
