
Experiment-4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800200  0000040e  00000482  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001719  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e26  00000000  00000000  00001cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000088c  00000000  00000000  00002afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000178  00000000  00000000  00003388  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006a1  00000000  00000000  00003500  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000acd  00000000  00000000  00003ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000466e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e0       	ldi	r30, 0x0E	; 14
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 33       	cpi	r26, 0x32	; 50
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e3       	ldi	r26, 0x32	; 50
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 33       	cpi	r26, 0x32	; 50
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	63 d0       	rcall	.+198    	; 0x1e6 <main>
 120:	74 c1       	rjmp	.+744    	; 0x40a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <scrolling_loop>:


/**
 * @brief      Code to display scrolling message on LCD
 */
void scrolling_loop() {
 124:	8f 92       	push	r8
 126:	9f 92       	push	r9
 128:	af 92       	push	r10
 12a:	bf 92       	push	r11
 12c:	cf 92       	push	r12
 12e:	df 92       	push	r13
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
 140:	a0 97       	sbiw	r28, 0x20	; 32
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	f8 94       	cli
 146:	de bf       	out	0x3e, r29	; 62
 148:	0f be       	out	0x3f, r0	; 63
 14a:	cd bf       	out	0x3d, r28	; 61
	char text[] = "Crash Course - Embedded Systems";
 14c:	80 e2       	ldi	r24, 0x20	; 32
 14e:	e0 e0       	ldi	r30, 0x00	; 0
 150:	f2 e0       	ldi	r31, 0x02	; 2
 152:	de 01       	movw	r26, r28
 154:	11 96       	adiw	r26, 0x01	; 1
 156:	01 90       	ld	r0, Z+
 158:	0d 92       	st	X+, r0
 15a:	8a 95       	dec	r24
 15c:	e1 f7       	brne	.-8      	; 0x156 <scrolling_loop+0x32>
 15e:	8e 01       	movw	r16, r28
 160:	0f 5f       	subi	r16, 0xFF	; 255
 162:	1f 4f       	sbci	r17, 0xFF	; 255
		//lcd_wr_char(1,j,text[i]);
		//i++;
		//j++;
	//}
	int i=0,col=1,col2=15;
	while(text[i] !='\0')
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
		//lcd_wr_command(lcd);
		//lcd_wr_char(1,j,text[i]);
		//i++;
		//j++;
	//}
	int i=0,col=1,col2=15;
 168:	0f 2e       	mov	r0, r31
 16a:	ff e0       	ldi	r31, 0x0F	; 15
 16c:	af 2e       	mov	r10, r31
 16e:	b1 2c       	mov	r11, r1
 170:	f0 2d       	mov	r31, r0
 172:	cc 24       	eor	r12, r12
 174:	c3 94       	inc	r12
 176:	d1 2c       	mov	r13, r1
	while(text[i] !='\0')
 178:	14 c0       	rjmp	.+40     	; 0x1a2 <scrolling_loop+0x7e>
	{
		if(i>14)
 17a:	0f 97       	sbiw	r24, 0x0f	; 15
 17c:	4c f0       	brlt	.+18     	; 0x190 <scrolling_loop+0x6c>
		{
			lcd_wr_char(1,++col2,text[i]);
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	a2 1a       	sub	r10, r18
 182:	b2 0a       	sbc	r11, r18
 184:	6a 2d       	mov	r22, r10
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	f0 d0       	rcall	.+480    	; 0x36a <lcd_wr_char>
			lcd_wr_command(0x18);
 18a:	88 e1       	ldi	r24, 0x18	; 24
 18c:	97 d0       	rcall	.+302    	; 0x2bc <lcd_wr_command>
 18e:	08 c0       	rjmp	.+16     	; 0x1a0 <scrolling_loop+0x7c>
			i++;
		}
		else
		{
			lcd_wr_char(1,col++,text[i]);
 190:	46 01       	movw	r8, r12
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	88 1a       	sub	r8, r24
 196:	98 0a       	sbc	r9, r24
 198:	6c 2d       	mov	r22, r12
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	e6 d0       	rcall	.+460    	; 0x36a <lcd_wr_char>
 19e:	64 01       	movw	r12, r8
 1a0:	c7 01       	movw	r24, r14
		//lcd_wr_char(1,j,text[i]);
		//i++;
		//j++;
	//}
	int i=0,col=1,col2=15;
	while(text[i] !='\0')
 1a2:	f8 01       	movw	r30, r16
 1a4:	41 91       	ld	r20, Z+
 1a6:	8f 01       	movw	r16, r30
 1a8:	7c 01       	movw	r14, r24
 1aa:	ff ef       	ldi	r31, 0xFF	; 255
 1ac:	ef 1a       	sub	r14, r31
 1ae:	ff 0a       	sbc	r15, r31
 1b0:	41 11       	cpse	r20, r1
 1b2:	e3 cf       	rjmp	.-58     	; 0x17a <scrolling_loop+0x56>
		{
			lcd_wr_char(1,col++,text[i]);
			i++;
		}
	}
}
 1b4:	a0 96       	adiw	r28, 0x20	; 32
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	ff 90       	pop	r15
 1ca:	ef 90       	pop	r14
 1cc:	df 90       	pop	r13
 1ce:	cf 90       	pop	r12
 1d0:	bf 90       	pop	r11
 1d2:	af 90       	pop	r10
 1d4:	9f 90       	pop	r9
 1d6:	8f 90       	pop	r8
 1d8:	08 95       	ret

000001da <static_loop>:

/**
 * @brief      Code to display static message on LCD
 */
void static_loop() {
	lcd_string(2,1,"e-Yantra Academy");
 1da:	40 e2       	ldi	r20, 0x20	; 32
 1dc:	52 e0       	ldi	r21, 0x02	; 2
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	f2 c0       	rjmp	.+484    	; 0x3c8 <lcd_string>
 1e4:	08 95       	ret

000001e6 <main>:
 * @details    First Initializes LCD and displays static and scrolling message on LCD
 */
int main(void) {
	
	// << NOTE >> : You are not allowed to modify or change anything inside this function
	lcd_port_config();					// Initialize the LCD port
 1e6:	1a d0       	rcall	.+52     	; 0x21c <lcd_port_config>
	lcd_init();							// Initialize the LCD
 1e8:	8e d0       	rcall	.+284    	; 0x306 <lcd_init>
	
	while(1)
	{
		lcd_clear();					// Clears LCD
 1ea:	bc d0       	rcall	.+376    	; 0x364 <lcd_clear>
		lcd_home();						// Sets the cursor's to home i.e. 1st row, 1st column
 1ec:	9d d0       	rcall	.+314    	; 0x328 <lcd_home>
 1ee:	f5 df       	rcall	.-22     	; 0x1da <static_loop>
		
		static_loop();					// Display static text
 1f0:	2f ef       	ldi	r18, 0xFF	; 255
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	99 e5       	ldi	r25, 0x59	; 89
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0x10>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x1a>
		_delay_ms(2000);				// Delay of 2 seconds
		
		lcd_clear();					// Clears LCD
 200:	00 00       	nop
 202:	b0 d0       	rcall	.+352    	; 0x364 <lcd_clear>
		lcd_home();						// Sets the cursor's to home i.e. 1st row, 1st column
 204:	91 d0       	rcall	.+290    	; 0x328 <lcd_home>
 206:	8e df       	rcall	.-228    	; 0x124 <scrolling_loop>
		
		scrolling_loop();				// Display scrolling text
 208:	2f ef       	ldi	r18, 0xFF	; 255
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	99 e5       	ldi	r25, 0x59	; 89
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x28>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x32>
 218:	00 00       	nop
 21a:	e7 cf       	rjmp	.-50     	; 0x1ea <main+0x4>

0000021c <lcd_port_config>:
 * Example Call: lcd_port_config();
 */
void lcd_port_config(void)
{
	// Only set LCD pins direction as Output
	lcd_control_ddr_reg |= ( ( 1 << RS_pin ) | ( 1 << RW_pin ) | ( 1 << EN_pin ) );
 21c:	87 b1       	in	r24, 0x07	; 7
 21e:	87 60       	ori	r24, 0x07	; 7
 220:	87 b9       	out	0x07, r24	; 7
	lcd_data_ddr_reg	|= ( ( 1 << DB4_pin ) | ( 1 << DB5_pin ) | ( 1 << DB6_pin ) | ( 1 << DB7_pin ) );
 222:	87 b1       	in	r24, 0x07	; 7
 224:	80 6f       	ori	r24, 0xF0	; 240
 226:	87 b9       	out	0x07, r24	; 7
	
	// Only set LCD pins to logic 0
	lcd_control_port_reg	&=	~( ( 1 << RS_pin ) | ( 1 << RW_pin ) | ( 1 << EN_pin ) );
 228:	88 b1       	in	r24, 0x08	; 8
 22a:	88 7f       	andi	r24, 0xF8	; 248
 22c:	88 b9       	out	0x08, r24	; 8
	lcd_data_port_reg		&=	~( ( 1 << DB4_pin ) | ( 1 << DB5_pin ) | ( 1 << DB6_pin ) | ( 1 << DB7_pin ) );
 22e:	88 b1       	in	r24, 0x08	; 8
 230:	8f 70       	andi	r24, 0x0F	; 15
 232:	88 b9       	out	0x08, r24	; 8
 234:	08 95       	ret

00000236 <lcd_set_4bit>:
 236:	86 e6       	ldi	r24, 0x66	; 102
 238:	9e e0       	ldi	r25, 0x0E	; 14
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_set_4bit+0x4>
 23e:	00 00       	nop
 */
void lcd_set_4bit (void)
{
	_delay_ms(1);
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 240:	40 98       	cbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 242:	41 98       	cbi	0x08, 1	; 8
	lcd_data_port_reg = 0x30;							// Sending 3
 244:	80 e3       	ldi	r24, 0x30	; 48
 246:	88 b9       	out	0x08, r24	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 248:	42 9a       	sbi	0x08, 2	; 8
 24a:	ef ef       	ldi	r30, 0xFF	; 255
 24c:	f7 e4       	ldi	r31, 0x47	; 71
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <lcd_set_4bit+0x18>
 252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_set_4bit+0x1e>
 254:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 256:	42 98       	cbi	0x08, 2	; 8
 258:	e6 e6       	ldi	r30, 0x66	; 102
 25a:	fe e0       	ldi	r31, 0x0E	; 14
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_set_4bit+0x26>
 260:	00 00       	nop

	_delay_ms(1);
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 262:	40 98       	cbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 264:	41 98       	cbi	0x08, 1	; 8
	lcd_data_port_reg = 0x30;							// Sending 3
 266:	88 b9       	out	0x08, r24	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 268:	42 9a       	sbi	0x08, 2	; 8
 26a:	ef ef       	ldi	r30, 0xFF	; 255
 26c:	f7 e4       	ldi	r31, 0x47	; 71
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_set_4bit+0x38>
 272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_set_4bit+0x3e>
 274:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 276:	42 98       	cbi	0x08, 2	; 8
 278:	e6 e6       	ldi	r30, 0x66	; 102
 27a:	fe e0       	ldi	r31, 0x0E	; 14
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_set_4bit+0x46>
 280:	00 00       	nop

	_delay_ms(1);	
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 282:	40 98       	cbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 284:	41 98       	cbi	0x08, 1	; 8
	lcd_data_port_reg = 0x30;							// Sending 3
 286:	88 b9       	out	0x08, r24	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 288:	42 9a       	sbi	0x08, 2	; 8
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	97 e4       	ldi	r25, 0x47	; 71
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <lcd_set_4bit+0x58>
 292:	00 c0       	rjmp	.+0      	; 0x294 <lcd_set_4bit+0x5e>
 294:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 296:	42 98       	cbi	0x08, 2	; 8
 298:	e6 e6       	ldi	r30, 0x66	; 102
 29a:	fe e0       	ldi	r31, 0x0E	; 14
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x66>
 2a0:	00 00       	nop
	
	_delay_ms(1);
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 2a2:	40 98       	cbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 2a4:	41 98       	cbi	0x08, 1	; 8
	lcd_data_port_reg = 0x20;							// Sending 2 to initialize LCD in 4-bit mode
 2a6:	80 e2       	ldi	r24, 0x20	; 32
 2a8:	88 b9       	out	0x08, r24	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 2aa:	42 9a       	sbi	0x08, 2	; 8
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	97 e4       	ldi	r25, 0x47	; 71
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <lcd_set_4bit+0x7a>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <lcd_set_4bit+0x80>
 2b6:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 2b8:	42 98       	cbi	0x08, 2	; 8
 2ba:	08 95       	ret

000002bc <lcd_wr_command>:
{
	unsigned char temp;
	
	temp = cmd;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
 2bc:	98 b1       	in	r25, 0x08	; 8
 2be:	9f 70       	andi	r25, 0x0F	; 15
 2c0:	98 b9       	out	0x08, r25	; 8
	lcd_data_port_reg |= temp;
 2c2:	98 b1       	in	r25, 0x08	; 8
 2c4:	28 2f       	mov	r18, r24
 2c6:	20 7f       	andi	r18, 0xF0	; 240
 2c8:	92 2b       	or	r25, r18
 2ca:	98 b9       	out	0x08, r25	; 8
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 2cc:	40 98       	cbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 2ce:	41 98       	cbi	0x08, 1	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 2d0:	42 9a       	sbi	0x08, 2	; 8
 2d2:	ef ef       	ldi	r30, 0xFF	; 255
 2d4:	f7 e4       	ldi	r31, 0x47	; 71
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <lcd_wr_command+0x1a>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <lcd_wr_command+0x20>
 2dc:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 2de:	42 98       	cbi	0x08, 2	; 8
	
	cmd = (cmd & 0x0F);
	cmd = (cmd << 4);
	lcd_data_port_reg &= 0x0F;
 2e0:	98 b1       	in	r25, 0x08	; 8
 2e2:	9f 70       	andi	r25, 0x0F	; 15
 2e4:	98 b9       	out	0x08, r25	; 8
	lcd_data_port_reg |= cmd;
 2e6:	98 b1       	in	r25, 0x08	; 8
 2e8:	82 95       	swap	r24
 2ea:	80 7f       	andi	r24, 0xF0	; 240
 2ec:	89 2b       	or	r24, r25
 2ee:	88 b9       	out	0x08, r24	; 8
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 2f0:	40 98       	cbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 2f2:	41 98       	cbi	0x08, 1	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 2f4:	42 9a       	sbi	0x08, 2	; 8
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	97 e4       	ldi	r25, 0x47	; 71
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_wr_command+0x3e>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <lcd_wr_command+0x44>
 300:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 302:	42 98       	cbi	0x08, 2	; 8
 304:	08 95       	ret

00000306 <lcd_init>:
 * Logic: This function initializes the LCD
 * Example Call: lcd_init();
 */
void lcd_init (void)
{
	lcd_set_4bit();
 306:	97 df       	rcall	.-210    	; 0x236 <lcd_set_4bit>
 308:	86 e6       	ldi	r24, 0x66	; 102
 30a:	9e e0       	ldi	r25, 0x0E	; 14
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <lcd_init+0x6>
 310:	00 00       	nop
	_delay_ms(1);
	lcd_wr_command(0x28);								// LCD 4-bit mode and 2 lines
 312:	88 e2       	ldi	r24, 0x28	; 40
 314:	d3 df       	rcall	.-90     	; 0x2bc <lcd_wr_command>
	lcd_wr_command(0x01);								// Clear display screen
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	d1 df       	rcall	.-94     	; 0x2bc <lcd_wr_command>
	lcd_wr_command(0x06);								// Entry mode
 31a:	86 e0       	ldi	r24, 0x06	; 6
 31c:	cf df       	rcall	.-98     	; 0x2bc <lcd_wr_command>
	lcd_wr_command(0x0E);								// Display On and Cursor On
 31e:	8e e0       	ldi	r24, 0x0E	; 14
 320:	cd df       	rcall	.-102    	; 0x2bc <lcd_wr_command>
 322:	80 e8       	ldi	r24, 0x80	; 128
	lcd_wr_command(0x80);								// LCD cursor set to Home position		
 324:	cb cf       	rjmp	.-106    	; 0x2bc <lcd_wr_command>
 326:	08 95       	ret

00000328 <lcd_home>:
 328:	80 e8       	ldi	r24, 0x80	; 128
 32a:	c8 cf       	rjmp	.-112    	; 0x2bc <lcd_wr_command>
 * Logic: Passes 0x80 command to LCD using lcd_wr_command
 * Example Call: lcd_home();
 */
void lcd_home (void)
{
	lcd_wr_command(0x80);								// LCD cursor set to Home position
 32c:	08 95       	ret

0000032e <lcd_cursor>:
 *
 * Example Call: lcd_cursor(2, 3);
 */
void lcd_cursor (char row, char column)
{
	switch (row)
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	69 f0       	breq	.+26     	; 0x34c <lcd_cursor+0x1e>
 332:	18 f4       	brcc	.+6      	; 0x33a <lcd_cursor+0xc>
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	31 f0       	breq	.+12     	; 0x344 <lcd_cursor+0x16>
 338:	08 95       	ret
 33a:	83 30       	cpi	r24, 0x03	; 3
 33c:	59 f0       	breq	.+22     	; 0x354 <lcd_cursor+0x26>
 33e:	84 30       	cpi	r24, 0x04	; 4
 340:	69 f0       	breq	.+26     	; 0x35c <lcd_cursor+0x2e>
 342:	08 95       	ret
	{
		case 1: lcd_wr_command (0x80 + column - 1); break;
 344:	8f e7       	ldi	r24, 0x7F	; 127
 346:	86 0f       	add	r24, r22
 348:	b9 cf       	rjmp	.-142    	; 0x2bc <lcd_wr_command>
 34a:	08 95       	ret
		case 2: lcd_wr_command (0xC0 + column - 1); break;
 34c:	8f eb       	ldi	r24, 0xBF	; 191
 34e:	86 0f       	add	r24, r22
 350:	b5 cf       	rjmp	.-150    	; 0x2bc <lcd_wr_command>
 352:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 354:	83 e9       	ldi	r24, 0x93	; 147
 356:	86 0f       	add	r24, r22
 358:	b1 cf       	rjmp	.-158    	; 0x2bc <lcd_wr_command>
 35a:	08 95       	ret
		case 4: lcd_wr_command (0xD4 + column - 1); break;
 35c:	83 ed       	ldi	r24, 0xD3	; 211
 35e:	86 0f       	add	r24, r22
 360:	ad cf       	rjmp	.-166    	; 0x2bc <lcd_wr_command>
 362:	08 95       	ret

00000364 <lcd_clear>:
 364:	81 e0       	ldi	r24, 0x01	; 1
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 366:	aa cf       	rjmp	.-172    	; 0x2bc <lcd_wr_command>
 368:	08 95       	ret

0000036a <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 36a:	cf 93       	push	r28
 36c:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 36e:	df df       	rcall	.-66     	; 0x32e <lcd_cursor>
	
	char temp;
	
	temp = alpha_num_char;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
 370:	88 b1       	in	r24, 0x08	; 8
 372:	8f 70       	andi	r24, 0x0F	; 15
 374:	88 b9       	out	0x08, r24	; 8
	lcd_data_port_reg |= temp;
 376:	88 b1       	in	r24, 0x08	; 8
 378:	9c 2f       	mov	r25, r28
 37a:	90 7f       	andi	r25, 0xF0	; 240
 37c:	89 2b       	or	r24, r25
 37e:	88 b9       	out	0x08, r24	; 8
 380:	8f ef       	ldi	r24, 0xFF	; 255
 382:	97 e4       	ldi	r25, 0x47	; 71
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <lcd_wr_char+0x1a>
 388:	00 c0       	rjmp	.+0      	; 0x38a <lcd_wr_char+0x20>
 38a:	00 00       	nop
	_delay_ms(5);
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 38c:	40 9a       	sbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 38e:	41 98       	cbi	0x08, 1	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 390:	42 9a       	sbi	0x08, 2	; 8
 392:	8f ef       	ldi	r24, 0xFF	; 255
 394:	97 e4       	ldi	r25, 0x47	; 71
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <lcd_wr_char+0x2c>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <lcd_wr_char+0x32>
 39c:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 39e:	42 98       	cbi	0x08, 2	; 8
	
	alpha_num_char = (alpha_num_char & 0x0F);
	alpha_num_char = (alpha_num_char << 4);
	lcd_data_port_reg &= 0x0F;
 3a0:	88 b1       	in	r24, 0x08	; 8
 3a2:	8f 70       	andi	r24, 0x0F	; 15
 3a4:	88 b9       	out	0x08, r24	; 8
	lcd_data_port_reg |= alpha_num_char;
 3a6:	88 b1       	in	r24, 0x08	; 8
 3a8:	c2 95       	swap	r28
 3aa:	c0 7f       	andi	r28, 0xF0	; 240
 3ac:	c8 2b       	or	r28, r24
 3ae:	c8 b9       	out	0x08, r28	; 8
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 3b0:	40 9a       	sbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 3b2:	41 98       	cbi	0x08, 1	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 3b4:	42 9a       	sbi	0x08, 2	; 8
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	97 e4       	ldi	r25, 0x47	; 71
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <lcd_wr_char+0x50>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <lcd_wr_char+0x56>
 3c0:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 3c2:	42 98       	cbi	0x08, 2	; 8
}
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
 3c8:	0f 93       	push	r16
 3ca:	1f 93       	push	r17
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	d8 2f       	mov	r29, r24
 3d2:	c6 2f       	mov	r28, r22
 3d4:	fa 01       	movw	r30, r20
	while(*str != '\0')
 3d6:	40 81       	ld	r20, Z
 3d8:	44 23       	and	r20, r20
 3da:	91 f0       	breq	.+36     	; 0x400 <__LOCK_REGION_LENGTH__>
 3dc:	8f 01       	movw	r16, r30
 3de:	0f 5f       	subi	r16, 0xFF	; 255
 3e0:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(row, column, *str);
 3e2:	6c 2f       	mov	r22, r28
 3e4:	8d 2f       	mov	r24, r29
 3e6:	c1 df       	rcall	.-126    	; 0x36a <lcd_wr_char>
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	97 e4       	ldi	r25, 0x47	; 71
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_string+0x24>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <lcd_string+0x2a>
 3f2:	00 00       	nop
		str++;
	_delay_ms(5);		
		column+=1;
 3f4:	cf 5f       	subi	r28, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
 3f6:	f8 01       	movw	r30, r16
 3f8:	41 91       	ld	r20, Z+
 3fa:	8f 01       	movw	r16, r30
 3fc:	41 11       	cpse	r20, r1
 3fe:	f1 cf       	rjmp	.-30     	; 0x3e2 <lcd_string+0x1a>
		lcd_wr_char(row, column, *str);
		str++;
	_delay_ms(5);		
		column+=1;
	}
}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	08 95       	ret

0000040a <_exit>:
 40a:	f8 94       	cli

0000040c <__stop_program>:
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__stop_program>
